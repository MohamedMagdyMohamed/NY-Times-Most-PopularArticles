// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: 'org.sonarqube'

buildscript {
    ext {
        gradle_version = '4.1.3'
        kotlin_version = '1.4.21'
        core_version = '1.3.2'
        appcompat_version = '1.2.0'
        material_version = '1.3.0'
        constraintlayout_version = '2.0.4'

        junit_ext_version = '1.1.2'
        testx_rules_version = '1.3.0'
        android_arch_core_testing_version = '1.1.1'
        mockwebserver_version = '4.1.0'
        espresso_contrib_version = '3.3.0'

        ktlint_version = '9.4.1'
        detekt_version = '1.14.2'
        sonar_qube_version = "2.6.1"
        jacoco_version = '0.8.4'

        nav_version = '2.3.4'
        gson_version = '2.8.6'
        retrofit_version = '2.9.0'
        logging_interceptor_version = '4.7.2'
        koin_version = '2.1.6'
        lifecycle_version = '2.2.0'
        glide_version = '4.11.0'
        leak_canary_version = '2.5'
        couroutines_version = '1.4.2'
        coroutines_adapter = '0.9.2'
    }

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        // ktlint
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_version"

        // Detekt
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"

        // SaveArgs
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"

        // SonarQube
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonar_qube_version"

        // Jacoco
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "io.gitlab.arturbosch.detekt"

    ktlint {
        version = "0.39.0"
        debug = true
        verbose = true
        android = false
        outputToConsole = true
        outputColorName = "RED"
        ignoreFailures = true
        enableExperimentalRules = true
        reporters {
            reporter "plain"
            reporter "checkstyle"
            reporter "html"
        }
        filter {
            exclude("**/generated/**")
            include("**/kotlin/**")
        }
    }

    detekt {
        toolVersion = "1.14.1"
        input = files(rootProject.rootDir)
        config = rootProject.files("config/detekt/detekt.yml")
        failFast = false

        reports {
            html.enabled = true // observe findings in your browser with structure and code snippets
            xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
            txt.enabled = true
            // similar to the console output, contains issue signature to manually edit baseline files
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "com.example.nytimesmostpopulararticles"
        property "sonar.projectName", "MohamedMagdyMohamed_NY-Times-Most-PopularArticles"
        property "sonar.host.url", "http://localhost:9000"

        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/outputs/lint-results"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}